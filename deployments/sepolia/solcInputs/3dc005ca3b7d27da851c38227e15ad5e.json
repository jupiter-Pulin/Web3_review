{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n\n  function latestTimestamp() external view returns (uint256);\n\n  function latestRound() external view returns (uint256);\n\n  function getAnswer(uint256 roundId) external view returns (int256);\n\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV2V3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {AggregatorInterface} from \"./AggregatorInterface.sol\";\nimport {AggregatorV3Interface} from \"./AggregatorV3Interface.sol\";\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../shared/interfaces/AggregatorV2V3Interface.sol\";\n\n/**\n * @title MockV3Aggregator\n * @notice Based on the FluxAggregator contract\n * @notice Use this contract when you need to test\n * other contract's ability to read data from an\n * aggregator contract, but how the aggregator got\n * its answer is unimportant\n */\ncontract MockV3Aggregator is AggregatorV2V3Interface {\n  uint256 public constant override version = 0;\n\n  uint8 public override decimals;\n  int256 public override latestAnswer;\n  uint256 public override latestTimestamp;\n  uint256 public override latestRound;\n\n  mapping(uint256 => int256) public override getAnswer;\n  mapping(uint256 => uint256) public override getTimestamp;\n  mapping(uint256 => uint256) private getStartedAt;\n\n  constructor(uint8 _decimals, int256 _initialAnswer) {\n    decimals = _decimals;\n    updateAnswer(_initialAnswer);\n  }\n\n  function updateAnswer(int256 _answer) public {\n    latestAnswer = _answer;\n    latestTimestamp = block.timestamp;\n    latestRound++;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = block.timestamp;\n    getStartedAt[latestRound] = block.timestamp;\n  }\n\n  function updateRoundData(uint80 _roundId, int256 _answer, uint256 _timestamp, uint256 _startedAt) public {\n    latestRound = _roundId;\n    latestAnswer = _answer;\n    latestTimestamp = _timestamp;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = _timestamp;\n    getStartedAt[latestRound] = _startedAt;\n  }\n\n  function getRoundData(\n    uint80 _roundId\n  )\n    external\n    view\n    override\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\n  {\n    return (_roundId, getAnswer[_roundId], getStartedAt[_roundId], getTimestamp[_roundId], _roundId);\n  }\n\n  function latestRoundData()\n    external\n    view\n    override\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\n  {\n    return (\n      uint80(latestRound),\n      getAnswer[latestRound],\n      getStartedAt[latestRound],\n      getTimestamp[latestRound],\n      uint80(latestRound)\n    );\n  }\n\n  function description() external pure override returns (string memory) {\n    return \"v0.8/tests/MockV3Aggregator.sol\";\n  }\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n// 导入 dateFeed 合约，转换 ETH\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\ncontract FundMe {\n    AggregatorV3Interface public dateFeedsAddr;\n    uint256 LOCK_TIME;\n    uint256 deployBlockTime;\n    mapping (address => uint256) public fundersMapping;\n    uint256 constant MIN_VALUE = 1 * 10 ** 18;\n    address public owner;\n    uint256 constant TARGET = 100 * 10 ** 18;\n    address fundMeTokenAddr;\n    bool public getEthToOwnerSucess=false;\n\n    constructor(uint256 _lockTime,address _dateFeedsAddr) {\n        LOCK_TIME = _lockTime;\n        deployBlockTime = block.timestamp;\n        owner = msg.sender;\n        dateFeedsAddr = AggregatorV3Interface(_dateFeedsAddr);\n    }\n\n    // 创建一个收款函数，让参与者在限定时间内募款,且有最小值\n    function fund() public payable {\n        require(block.timestamp < deployBlockTime + LOCK_TIME, \"payable is out of time\");\n        require(EthToUsd(msg.value) >= MIN_VALUE, \"pay more ETH\");\n        fundersMapping[msg.sender] += msg.value;\n    }\n\n    // 设定一个目标值，使达到目标且到达规定时间后 权限者能够提款\n    function getEthToOwner() external  onlyOwner {\n        require(block.timestamp > deployBlockTime + LOCK_TIME, \"payable is not on time\");\n        require(EthToUsd(address(this).balance) >= TARGET, \"not fund enough money\");\n        \n        bool success;\n        (success, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        \n        require(success, \"Transfer failed.\");\n        getEthToOwnerSucess=true;\n    }\n\n    // 未到目标，且到达规定时间，参与者自行提款\n    function getEthToFunder() external  {\n        require(block.timestamp > deployBlockTime + LOCK_TIME, \"payable is not on time\");\n        require(EthToUsd(address(this).balance) <= TARGET, \"not fund enough money\");\n        require(fundersMapping[msg.sender] != 0, \"your balance is 0\");\n        \n        bool success;\n        (success, ) = payable(msg.sender).call{value: fundersMapping[msg.sender]}(\"\");\n        \n        require(success, \"Transfer failed.\");\n        fundersMapping[msg.sender] = 0;\n    }\n\n    // 更换地址拥有权\n    function tranferOwnership(address newOwner) public onlyOwner {\n        owner = newOwner;\n    }\n\n    // eth/美元的实时价格\n    function getChainlinkDataFeedLatestAnswer() public view returns (int) {\n        (\n            , // uint80 roundID\n            int answer,\n            , // uint startedAt\n            , // uint timeStamp\n            // uint80 answeredInRound\n        ) = dateFeedsAddr.latestRoundData();\n        return answer;\n    }\n\n    // 将单位转为美元而不是 wei\n    function EthToUsd(uint256 _amount) internal view returns (uint256) {\n        uint256 EthPrice = uint256(getChainlinkDataFeedLatestAnswer());\n        return _amount * EthPrice / 10 ** 8;\n    }\n\n    //在锻造mint后，fundersMapping需要相对应减少，且只能fundMeToken这个合约才有资格调用\n    function adjustFundersMapping (address funder,uint256 _amount) external{\n      require(msg.sender==fundMeTokenAddr,\"you don't have premisson\");\n      fundersMapping[funder]-=_amount;\n    }\n    \n    function setFundMeTokenAddr(address _fundMeTokenAddr) public onlyOwner{\n        fundMeTokenAddr=_fundMeTokenAddr;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"you are not owner\");\n        _;\n    }\n}\n"
    },
    "contracts/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport{MockV3Aggregator}from\"@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol\";\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}